package com.daniel.back.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.daniel.back.models.Cliente;
import com.daniel.back.repository.ClienteRepository;
import com.daniel.back.repository.UrlRepository;

import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/api")
@AllArgsConstructor
public class ClienteController {

    private final ClienteRepository clienteRepository;

    @Autowired
    UrlRepository urlRepository;
    
    @GetMapping
    public ResponseEntity<Cliente> findAllClient(){
    	Cliente cliente = urlRepository.listAllClient();
    	return cliente != null? ResponseEntity.ok().body(cliente) : ResponseEntity.notFound().build();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Cliente> findById(@PathVariable Long id) {
        return clienteRepository.findById(id)
                .map(recordFound -> ResponseEntity.ok().body(recordFound))
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    @ResponseStatus(code = HttpStatus.CREATED)
    public Cliente create(@RequestBody Cliente course) {
        // System.out.println(course.getName());
        return clienteRepository.save(course);
        // return ResponseEntity.status(HttpStatus.CREATED)
        // .body(courseRepository.save(course));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Cliente> update(@PathVariable Long id,
            @RequestBody Cliente cliente) {
        return clienteRepository.findById(id)
                .map(recordFound -> {
                    recordFound.setCreatedAt(cliente.getCreatedAt());
                    recordFound.setCardName(cliente.getCardName());
                    recordFound.setAvatar(cliente.getAvatar());
                    recordFound.setAddress(cliente.getAddress());
                    recordFound.setZipCode(cliente.getZipCode());
                    recordFound.setCardCode(cliente.getCardCode());
                    Cliente updated = clienteRepository.save(recordFound);
                    return ResponseEntity.ok().body(updated);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        return clienteRepository.findById(id)
                .map(recordFound -> {
                    clienteRepository.deleteById(id);
                    return ResponseEntity.noContent().<Void>build();
                })
                .orElse(ResponseEntity.notFound().build());
    }
}
